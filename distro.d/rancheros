#!/bin/bash
# shellcheck disable=SC2034

RANCHEROS_VERSION=${RANCHEROS_VERSION:-v1.5.2}

echo "RancherOS Version: $RANCHEROS_VERSION"

mkdir -p "${RUN_DIR}/rancher/${RANCHEROS_VERSION}"

if [ ! -f "${RUN_DIR}/rancher/${RANCHEROS_VERSION}"/vmlinuz ]; then
    printf "* Downloading RancherOS vmlinuz %s ...\n" "$RANCHEROS_VERSION"
    wget -q "https://github.com/rancher/os/releases/download/$RANCHEROS_VERSION/vmlinuz" -O "${RUN_DIR}/rancher/${RANCHEROS_VERSION}/vmlinuz"
fi

if [ ! -f "${RUN_DIR}/rancher/${RANCHEROS_VERSION}"/initrd ]; then
    printf "* Downloading RancherOS initrd %s ...\n" "$RANCHEROS_VERSION"
    wget -q "https://github.com/rancher/os/releases/download/$RANCHEROS_VERSION/initrd" -O "${RUN_DIR}/rancher/${RANCHEROS_VERSION}/initrd"
fi

KERNEL_PATH="${RUN_DIR}/rancher/${RANCHEROS_VERSION}/vmlinuz"
INITRD_PATH="${RUN_DIR}/rancher/${RANCHEROS_VERSION}/initrd"

# cmdline returns the kernel cmdline to be used per VM. Available variables are VM_NUM, VMNET_ADDR, NETADDR, CIDR, TAP.
cmdline() {
  echo "earlyprintk=serial console=ttyS0 rancher.autologin=ttyS0 rancher.defaults.hostname=ros-vm${VM_NUM} rancher.defaults.network.dns.nameservers=[${VMNET_ADDR}] rancher.network.interfaces.eth0.dhcp=true rancher.network.interfaces.eth1.dhcp=false rancher.network.interfaces.eth1.address=${NETADDR}.1${VM_NUM}/${CIDR} rancher.state.dev=LABEL=RANCHER_STATE rancher.state.autoformat=[/dev/vda] rancher.state.formatzero cc.ssh_authorized_keys=['$(cat "${RUN_DIR}/.ssh/hyperkit.pub")']"
}

# Extra functionality to run before all VM creation
pre() {
  return
}

# Extra functionality to run after all VM creation
post() {
  echo "* Checking for SSH access ..."
  NETADDR="$(echo "${BRIDGE_IP}" | cut -d. -f1-3)"
  for VM_NUM in "${VMS[@]}"; do
    until ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ControlPath=none -i "${RUN_DIR}/.ssh/hyperkit" "rancher@${NETADDR}.1${VM_NUM}" /bin/true 2>/dev/null && \
      echo "  - ros-vm$VM_NUM SSH available via: ssh -i ${RUN_DIR}/.ssh/hyperkit rancher@${NETADDR}.1${VM_NUM}"
      do 
        echo "  - ros-vm$VM_NUM SSH timed out, retrying ..."; sleep 5
    done
  done
}

# Extra functionality to run before each VM creation
pre-vm() {
  return
}

# Extra functionality to run after each VM creation
post-vm() {
  return
}

# Extra functionality to run as part of clean.sh
clean() {
  return
}
